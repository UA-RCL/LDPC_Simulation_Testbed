----------------------------------------------------------------------------------
-- Engineer: Burak UNAL 
-- 
-- Create Date:    
-- Design Name:  Created by Burak UNAL 
-- Project Name: Gallager-B Hard decision Bit-Flipping algorithm
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--COPYRIGHT            : burak@email.arizona.edu
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE ieee.std_logic_unsigned.all;

entity random_numb is
    generic ( width : integer :=  31;
              threshold : integer:= 1717986918	 );
port (
      clk, ena : in std_logic;
		
      ran_out  		: out STD_LOGIC_VECTOR(1295 downto 0)
    );
end random_numb;

architecture Behavioral of random_numb is
signal tempo        : std_logic_vector(width-1 downto 0);
signal ran_out_sig  : STD_LOGIC_VECTOR(1295 downto

begin
process(clk)
variable rand_temp : std_logic_vector(width-1 downto 0):="110"& X"1254EA7"; 
variable temp : std_logic := '0';
begin
	if(rising_edge(clk) and ena='1') then
	temp := rand_temp(width-1) xor rand_temp(width-2);
	rand_temp(width-1 downto 1) := rand_temp(width-2 downto 0);
	rand_temp(0) := temp;
	
	ran_out_sig(1295 downto 1) <= ran_out_sig(1294 downto 0);
			if (rand_temp < threshold) then
			ran_out_sig(0) <= '0';
	       else
			ran_out_sig (0) <='1';
			end if;
			
	 
	end if;

	
end process;
ran_out <= ran_out_sig;
end;
